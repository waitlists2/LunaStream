"use client"

import React, { useState, useEffect } from "react"
import { useParams, Link } from "react-router-dom"
import { Play, Star, Calendar, Clock, Film, X, Heart, Eye, EyeOff, ChevronDown, Tv, Info, List, Grid, ChevronLeft } from "lucide-react"
import { tmdb } from "../services/tmdb"
import { analytics } from "../services/analytics"
import type { TVDetails, Episode } from "../types"
import { watchlistService } from "../services/watchlist"
import GlobalNavbar from "./GlobalNavbar"
import { playerConfigs, getPlayerUrl } from "../utils/playerUtils"
import { useLanguage } from "./LanguageContext"
import { translations } from "../data/i18n"
import Loading from "./Loading"
import { useIsMobile } from "../hooks/useIsMobile"
import HybridTVHeader from "./HybridTVHeader"

// ------------------ DISCORD WEBHOOK URL ------------------
const DISCORD_WEBHOOK_URL =
Â  "https://discord.com/api/webhooks/1403355573587542016/mBtSsbaV5Tw3uwJJWiMEWq8Z0Iy_0pRraJtJJGXz1pNV8BM6RTazq_FV7EmfBVSoIQ5n" // <------ PUT YOUR WEBHOOK URL HERE

// Function to send a watch event to Discord
async function sendDiscordWatchNotification(
Â  showName: string,
Â  seasonNumber: number,
Â  episodeNumber: number,
Â  episodeTitle: string,
Â  posterPath: string,
) {
Â  try {
Â  Â  const embed = {
Â  Â  Â  title: `ðŸŽ¬ Someone is watching!`,
Â  Â  Â  description: `**${showName}**\nSeason **${seasonNumber}** Episode **${episodeNumber}${episodeTitle ? `: ${episodeTitle}` : ""}**`,
Â  Â  Â  color: 0x9a3dce,
Â  Â  Â  timestamp: new Date().toISOString(),
Â  Â  Â  thumbnail: posterPath ? { url: tmdb.getImageUrl(posterPath, "w185") } : undefined,
Â  Â  }

Â  Â  await fetch(DISCORD_WEBHOOK_URL, {
Â  Â  Â  method: "POST",
Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  username: "Watch Bot",
Â  Â  Â  Â  avatar_url: "https://em-content.zobj.net/source/twitter/376/clapper-board_1f3ac.png",
Â  Â  Â  Â  embeds: [embed],
Â  Â  Â  }),
Â  Â  })
Â  } catch (err) {
Â  Â  console.error("Could not send Discord notification:", err)
Â  }
}
// --------------------------------------------------------

const TVDetail: React.FC = () => {
Â  const { id } = useParams<{ id: string }>()
Â  const [show, setShow] = useState<TVDetails | null>(null)
Â  const [selectedSeason, setSelectedSeason] = useState(1)
Â  const [episodes, setEpisodes] = useState<Episode[]>([])
Â  const [loading, setLoading] = useState(true)
Â  const [episodesLoading, setEpisodesLoading] = useState(false)
Â  const [isPlaying, setIsPlaying] = useState(false)
Â  const [currentEpisode, setCurrentEpisode] = useState<Episode | null>(null)
Â  const [sessionId, setSessionId] = useState<string | null>(null)
Â  const [showDescriptions, setShowDescriptions] = useState<{ [key: number]: boolean }>({})
Â  const [recentlyViewedTV, setRecentlyViewedTV] = useState<any[]>([])
Â  const [recentlyViewedTVEpisodes, setRecentlyViewedTVEpisodes] = useState<{ [showId: number]: { show: any; episodes: any[] } }>({})
Â  const [recentlyViewedMovies, setRecentlyViewedMovies] = useState<any[]>([])
Â  const [isFavorited, setIsFavorited] = useState(false)
Â  const [cast, setCast] = React.useState([])
Â  const [selectedPlayer, setSelectedPlayer] = useState(playerConfigs[0].id)
Â  const [seasonCast, setSeasonCast] = React.useState<any[]>([])
Â  const { language } = useLanguage()

Â  const isMobile = useIsMobile()

Â  const t = translations[language];

Â  useEffect(() => {
Â  Â  async function fetchSeasonCredits() {
Â  Â  Â  if (!show?.id) return;
Â  Â  Â  if (!selectedSeason) {
Â  Â  Â  Â  // No season selected, show default cast
Â  Â  Â  Â  setSeasonCast([]);
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  try {
Â  Â  Â  Â  const credits = await tmdb.getTVSeasonCredits(show.id, selectedSeason);
Â  Â  Â  Â  setSeasonCast(credits.cast || []);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Failed to fetch season credits:", error);
Â  Â  Â  Â  setSeasonCast([]);
Â  Â  Â  }
Â  Â  }
Â  Â  fetchSeasonCredits();
Â  }, [show?.id, selectedSeason]);

Â  useEffect(() => {
Â  Â  if (!show) return
Â  Â  const favorites = JSON.parse(localStorage.getItem("favoriteShows") || "[]")
Â  Â  const isFav = favorites.some((fav: any) => fav.id === show.id)
Â  Â  setIsFavorited(isFav)
Â  }, [show])

Â  const toggleFavorite = () => {
Â  Â  if (!show) return
Â  Â  const favorites = JSON.parse(localStorage.getItem("favoriteShows") || "[]")
Â  Â  const index = favorites.findIndex((fav: any) => fav.id === show.id)

Â  Â  if (index !== -1) {
Â  Â  Â  favorites.splice(index, 1)
Â  Â  Â  setIsFavorited(false)
Â  Â  } else {
Â  Â  Â  favorites.unshift(show)
Â  Â  Â  setIsFavorited(true)
Â  Â  }
Â  Â  localStorage.setItem("favoriteShows", JSON.stringify(favorites))
Â  }

Â  useEffect(() => {
Â  Â  async function fetchCredits() {
Â  Â  Â  setLoading(true)
Â  Â  Â  const credits = await tmdb.getTVCredits(show.id)
Â  Â  Â  setCast(credits.cast || [])
Â  Â  Â  setLoading(false)
Â  Â  }

Â  Â  if (show?.id) {
Â  Â  Â  fetchCredits()
Â  Â  }
Â  }, [show?.id])

Â  useEffect(() => {
Â  Â  const data = JSON.parse(localStorage.getItem("recentlyViewedTVEpisodes") || "{}")
Â  Â  const data2 = JSON.parse(localStorage.getItem("recentlyViewedMovies") || "[]")
Â  Â  setRecentlyViewedTVEpisodes(data)
Â  Â  setRecentlyViewedMovies(data2)
Â  }, [])

Â  const clearRecentlyViewed = () => {
Â  Â  localStorage.removeItem("recentlyViewedTVEpisodes")
Â  Â  setRecentlyViewedTVEpisodes({})
Â  Â  localStorage.removeItem("recentlyViewedMovies")
Â  Â  setRecentlyViewedMovies([])
Â  }

Â  useEffect(() => {
Â  Â  const fetchShow = async () => {
Â  Â  Â  if (!id) return
Â  Â  Â  
Â  Â  Â  const showId = Number.parseInt(id);
Â  Â  Â  
Â  Â  Â  setLoading(true)
Â  Â  Â  try {
Â  Â  Â  Â  const showData = await tmdb.getTVDetails(showId)
Â  Â  Â  Â  setShow(showData)
Â  Â  Â  Â  if (showData.seasons && showData.seasons.length > 0) {
Â  Â  Â  Â  Â  const firstSeason = showData.seasons.find((s: any) => s.season_number > 0) || showData.seasons[0]
Â  Â  Â  Â  Â  setSelectedSeason(firstSeason.season_number)
Â  Â  Â  Â  }
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Failed to fetch TV show:", error)
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false)
Â  Â  Â  }
Â  Â  }

Â  Â  fetchShow()
Â  }, [id])

Â  useEffect(() => {
Â  Â  const fetchEpisodesAndRating = async () => {
Â  Â  Â  if (!id || selectedSeason === 0) return
Â  Â  Â  setEpisodesLoading(true)
Â  Â  Â  try {
Â  Â  Â  Â  const seasonData = await tmdb.getTVSeasons(Number.parseInt(id), selectedSeason)
Â  Â  Â  Â  setEpisodes(seasonData.episodes || [])

Â  Â  Â  Â  if (show && show.seasons) {
Â  Â  Â  Â  Â  const seasonDetails = show.seasons.find(s => s.season_number === selectedSeason);
Â  Â  Â  Â  Â  if (seasonDetails && typeof seasonDetails.vote_average === 'number') {
Â  Â  Â  Â  Â  Â  setShow(prevShow => prevShow ? {
Â  Â  Â  Â  Â  Â  Â  ...prevShow,
Â  Â  Â  Â  Â  Â  Â  vote_average: parseFloat(seasonDetails.vote_average.toFixed(1)),
Â  Â  Â  Â  Â  Â  } : null);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Failed to fetch episodes or season details:", error)
Â  Â  Â  } finally {
Â  Â  Â  Â  setEpisodesLoading(false)
Â  Â  Â  }
Â  Â  }

Â  Â  fetchEpisodesAndRating()
Â  Â  setEpisodesLoading(false)
Â  }, [id, selectedSeason, show])

Â  useEffect(() => {
Â  Â  if (show) {
Â  Â  Â  const existing = JSON.parse(localStorage.getItem("recentlyViewedTV") || "[]")
Â  Â  Â  const filtered = existing.filter((item: any) => item.id !== show.id)
Â  Â  Â  const updated = [
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  id: show.id,
Â  Â  Â  Â  Â  name: show.name,
Â  Â  Â  Â  Â  poster_path: show.poster_path,
Â  Â  Â  Â  Â  first_air_date: show.first_air_date,
Â  Â  Â  Â  },
Â  Â  Â  Â  ...filtered,
Â  Â  Â  ]
Â  Â  Â  localStorage.setItem("recentlyViewedTV", JSON.stringify(updated.slice(0, 5)))
Â  Â  Â  setRecentlyViewedTV(updated.slice(0, 5))
Â  Â  }
Â  }, [show])

Â  // -------------- UPDATED: Send Discord notification on watch -------------
Â  const handleWatchEpisode = (episode: Episode) => {
Â  Â  if (show && id) {
Â  Â  Â  watchlistService.addEpisodeToWatchlist(
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  id: show.id,
Â  Â  Â  Â  Â  name: show.name,
Â  Â  Â  Â  Â  poster_path: show.poster_path,
Â  Â  Â  Â  Â  first_air_date: show.first_air_date,
Â  Â  Â  Â  Â  vote_average: show.vote_average,
Â  Â  Â  Â  },
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  id: episode.id,
Â  Â  Â  Â  Â  season_number: episode.season_number,
Â  Â  Â  Â  Â  episode_number: episode.episode_number,
Â  Â  Â  Â  Â  name: episode.name,
Â  Â  Â  Â  Â  air_date: episode.air_date,
Â  Â  Â  Â  },
Â  Â  Â  )

Â  Â  Â  const existing = JSON.parse(localStorage.getItem("recentlyViewedTVEpisodes") || "{}")

Â  Â  Â  const currentShowGroup = existing[show.id] || {
Â  Â  Â  Â  show: {
Â  Â  Â  Â  Â  id: show.id,
Â  Â  Â  Â  Â  name: show.name,
Â  Â  Â  Â  Â  poster_path: show.poster_path,
Â  Â  Â  Â  Â  first_air_date: show.first_air_date,
Â  Â  Â  Â  },
Â  Â  Â  Â  episodes: [],
Â  Â  Â  }

Â  Â  Â  currentShowGroup.episodes = currentShowGroup.episodes.filter(
Â  Â  Â  Â  (ep: any) => !(ep.season_number === episode.season_number && ep.episode_number === episode.episode_number),
Â  Â  Â  )

Â  Â  Â  currentShowGroup.episodes.unshift({
Â  Â  Â  Â  id: episode.id,
Â  Â  Â  Â  name: episode.name,
Â  Â  Â  Â  season_number: episode.season_number,
Â  Â  Â  Â  episode_number: episode.episode_number,
Â  Â  Â  Â  air_date: episode.air_date,
Â  Â  Â  })

Â  Â  Â  currentShowGroup.episodes = currentShowGroup.episodes.slice(0, 5)

Â  Â  Â  const updated = {
Â  Â  Â  Â  ...existing,
Â  Â  Â  Â  [show.id]: currentShowGroup,
Â  Â  Â  }

Â  Â  Â  localStorage.setItem("recentlyViewedTVEpisodes", JSON.stringify(updated))
Â  Â  Â  setRecentlyViewedTVEpisodes(updated)

Â  Â  Â  // ------------ DISCORD NOTIFICATION -------------
Â  Â  Â  sendDiscordWatchNotification(
Â  Â  Â  Â  show.name,
Â  Â  Â  Â  episode.season_number,
Â  Â  Â  Â  episode.episode_number,
Â  Â  Â  Â  episode.name,
Â  Â  Â  Â  show.poster_path,
Â  Â  Â  )
Â  Â  Â  // ----------------------------------------------

Â  Â  Â  const episodeDuration =
Â  Â  Â  Â  show.episode_run_time && show.episode_run_time.length > 0 ? show.episode_run_time[0] * 60 : 45 * 60

Â  Â  Â  const newSessionId = analytics.startSession(
Â  Â  Â  Â  "tv",
Â  Â  Â  Â  Number.parseInt(id),
Â  Â  Â  Â  show.name,
Â  Â  Â  Â  show.poster_path,
Â  Â  Â  Â  episode.season_number,
Â  Â  Â  Â  episode.episode_number,
Â  Â  Â  Â  episodeDuration,
Â  Â  Â  )
Â  Â  Â  setSessionId(newSessionId)
Â  Â  Â  setCurrentEpisode(episode)
Â  Â  Â  setIsPlaying(true)
Â  Â  }
Â  }

Â  const handleClosePlayer = () => {
Â  Â  if (sessionId) {
Â  Â  Â  const episodeDuration =
Â  Â  Â  Â  show?.episode_run_time && show.episode_run_time.length > 0 ? show.episode_run_time[0] * 60 : 45 * 60
Â  Â  Â  const finalTime = Math.random() * episodeDuration
Â  Â  Â  analytics.endSession(sessionId, finalTime)
Â  Â  Â  setSessionId(null)
Â  Â  }
Â  Â  setIsPlaying(false)
Â  Â  setCurrentEpisode(null)
Â  }

Â  useEffect(() => {
Â  Â  if (isPlaying && sessionId && show) {
Â  Â  Â  const interval = setInterval(() => {
Â  Â  Â  Â  const episodeDuration =
Â  Â  Â  Â  Â  show.episode_run_time && show.episode_run_time.length > 0 ? show.episode_run_time[0] * 60 : 45 * 60
Â  Â  Â  Â  const currentTime = Math.random() * episodeDuration
Â  Â  Â  Â  const additionalData: any = {}
Â  Â  Â  Â  if (Math.random() > 0.95) additionalData.pauseEvents = 1
Â  Â  Â  Â  if (Math.random() > 0.98) additionalData.seekEvents = 1
Â  Â  Â  Â  if (Math.random() > 0.99) additionalData.bufferingEvents = 1
Â  Â  Â  Â  if (Math.random() > 0.9) additionalData.isFullscreen = Math.random() > 0.5
Â  Â  Â  Â  analytics.updateSession(sessionId, currentTime, additionalData)
Â  Â  Â  }, 30000)

Â  Â  Â  return () => clearInterval(interval)
Â  Â  }
Â  }, [isPlaying, sessionId, show])

Â  const toggleDescription = (episodeId: number) => {
Â  Â  setShowDescriptions((prev) => ({
Â  Â  Â  ...prev,
Â  Â  Â  [episodeId]: !prev[episodeId],
Â  Â  }))
Â  }

Â  const formatAirDate = (dateString: string) => {
Â  Â  if (!dateString) return "TBA"
Â  Â  const date = new Date(dateString)
Â  Â  return date.toLocaleDateString("en-US", {
Â  Â  Â  year: "numeric",
Â  Â  Â  month: "short",
Â  Â  Â  day: "numeric",
Â  Â  })
Â  }

Â  if (loading) {
Â  Â  return <Loading message={t.status_loading_show_details || 'Loading show details...'} />
Â  }

Â  if (!show) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-indigo-100 dark:from-gray-900 dark:via-purple-900 dark:to-indigo-900 flex items-center justify-center transition-colors duration-300">
Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4 transition-colors duration-300">
Â  Â  Â  Â  Â  Â  {t.tv_not_found || 'Show not found'}
Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  <Link
Â  Â  Â  Â  Â  Â  to="/"
Â  Â  Â  Â  Â  Â  className="text-pink-600 dark:text-pink-400 hover:text-pink-700 dark:hover:text-pink-300 transition-colors"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {t.error_404_go_home}
Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  )
Â  }

Â  if (isPlaying && currentEpisode) {
Â  Â  return (
Â  Â  Â  <div className="fixed inset-0 bg-black z-50">
Â  Â  Â  Â  {/* Close button */}
Â  Â  Â  Â  <div className="absolute top-6 right-6 z-10">
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={handleClosePlayer}
Â  Â  Â  Â  Â  Â  className="text-white hover:text-gray-300 transition-colors"
Â  Â  Â  Â  Â  Â  aria-label={translations[language].close_player || "Close Player"}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <X className="w-8 h-8" />
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Player Selector */}
Â  Â  Â  Â  <div className="absolute top-6 left-6 z-10 group relative w-32 h-10">
Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  value={selectedPlayer}
Â  Â  Â  Â  Â  Â  onChange={(e) => setSelectedPlayer(e.target.value)}
Â  Â  Â  Â  Â  Â  className="opacity-0 group-hover:opacity-100 absolute inset-0 bg-black/70 text-white px-3 py-2 rounded-lg border border-white/20 focus:outline-none focus:ring-2 focus:ring-pink-500 appearance-none transition-opacity duration-200"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {playerConfigs.map((config) => (
Â  Â  Â  Â  Â  Â  Â  <option key={config.id} value={config.id}>
Â  Â  Â  Â  Â  Â  Â  Â  {config.name}
Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Player iframe */}
Â  Â  Â  Â  <iframe
Â  Â  Â  Â  Â  src={getPlayerUrl(selectedPlayer, id!, "tv", currentEpisode.season_number, currentEpisode.episode_number)}
Â  Â  Â  Â  Â  className="fixed top-0 left-0 w-full h-full border-0"
Â  Â  Â  Â  Â  allowFullScreen
Â  Â  Â  Â  Â  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen"
Â  Â  Â  Â  Â  title={`${show.name} - S${currentEpisode.season_number}E${currentEpisode.episode_number}`}
Â  Â  Â  Â  Â  referrerPolicy="no-referrer"
Â  Â  Â  Â  Â  sandbox="allow-scripts allow-same-origin allow-presentation allow-forms"
Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  colorScheme: "normal",
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  />
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  return (
Â  Â  <div className="min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-indigo-100 dark:from-gray-950 dark:via-gray-900 dark:to-gray-950 transition-colors duration-300">
Â  Â  Â  <GlobalNavbar />

Â  Â  Â  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
Â  Â  Â  Â  {/* Hybrid TV Header */}
Â  Â  Â  Â  <div className="mb-8">
            <Link
              to={`/`}
              className="text-pink-600 dark:text-pink-400 hover:underline ml-1"
            >
              <ChevronLeft />
            </Link>
Â  Â  Â  Â  Â  <HybridTVHeader
Â  Â  Â  Â  Â  Â  show={show}
Â  Â  Â  Â  Â  Â  selectedSeason={selectedSeason}
Â  Â  Â  Â  Â  Â  onSeasonChange={setSelectedSeason}
Â  Â  Â  Â  Â  Â  isFavorited={isFavorited}
Â  Â  Â  Â  Â  Â  onToggleFavorite={toggleFavorite}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Cast Overview */}
Â  Â  Â  Â  <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-xl border border-purple-200/50 dark:border-gray-700/50 overflow-hidden mb-8 transition-colors duration-300">
Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold text-gray-900 dark:text-white px-8 pt-8 mb-4">{t.cast_overview || 'Cast Overview'}</h2>
Â  Â  Â  Â  Â  <div className="flex flex-wrap gap-6 px-8 pb-8">
Â  Â  Â  Â  Â  Â  {loading ? (
Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-700 dark:text-gray-300">{t.status_loading_cast || 'Loading cast...'}</p>
Â  Â  Â  Â  Â  Â  ) : ((seasonCast.length > 0 ? seasonCast : cast).length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-700 dark:text-gray-300">{t.status_no_cast_info || 'No cast information available.'}</p>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  (seasonCast.length > 0 ? seasonCast : cast).slice(0, 12).map((actor: any) => (
Â  Â  Â  Â  Â  Â  Â  Â  <div key={actor.id} className="flex-shrink-0 w-28 text-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  src={
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  actor.profile_path
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? tmdb.getImageUrl(actor.profile_path, "w185")
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "/placeholder-avatar.png"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  alt={actor.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-28 h-28 object-cover rounded-full shadow-md mb-2 border border-gray-300 dark:border-gray-600"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm font-medium text-gray-800 dark:text-gray-200 truncate">{actor.name}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-gray-500 dark:text-gray-400 truncate">{actor.character}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Season Selector & Episodes */}
Â  Â  Â  Â  <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-xl border border-pink-200/50 dark:border-gray-700/50 p-6 transition-colors duration-300">
Â  Â  Â  Â  Â  {/* Adjust layout for mobile */}
Â  Â  Â  Â  Â  <div className={`flex items-center justify-between mb-6 ${isMobile ? "flex-col space-y-4" : ""}`}>
Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold text-gray-900 dark:text-white transition-colors duration-300">
Â  Â  Â  Â  Â  Â  Â  {t.episodes || 'Episodes'}
Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  <div className={`flex items-center space-x-3 ${isMobile ? "w-full justify-center" : ""}`}>
Â  Â  Â  Â  Â  Â  Â  {/* Season View Button */}
Â  Â  Â  Â  Â  Â  Â  <Link
Â  Â  Â  Â  Â  Â  Â  Â  to={`/tv/${id}/season/${selectedSeason}`}
Â  Â  Â  Â  Â  Â  Â  Â  className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white px-4 py-2 rounded-xl font-semibold hover:from-indigo-600 hover:to-purple-700 transition-colors flex items-center space-x-2 shadow-lg"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <List className="w-4 h-4" />
Â  Â  Â  Â  Â  Â  Â  Â  <span>{isMobile ? 'Season' : 'View Season'}</span>
Â  Â  Â  Â  Â  Â  Â  </Link>

            {/* Season Selector */}
            {show?.seasons && show.seasons.length > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative group">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={selectedSeason}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setSelectedSeason(Number(e.target.value))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="pr-10 bg-white/95 dark:bg-gray-800/95 backdrop-blur-md rounded-xl border border-pink-200/50 dark:border-gray-600/30 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-pink-500 transition-all duration-200 appearance-none py-2 px-4 cursor-pointer font-semibold"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {show.seasons
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .filter((season: any) => season.season_number > 0)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .map((season: any) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={season.id} value={season.season_number}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {t.season} {season.season_number}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <ChevronDown className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-500 dark:text-gray-400 pointer-events-none transition-transform duration-200 group-hover:rotate-180" />
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Episodes List */}
Â  Â  Â  Â  Â  {episodesLoading ? (
Â  Â  Â  Â  Â  Â  <div className={`text-center ${isMobile ? 'py-6' : 'py-8'}`}>
Â  Â  Â  Â  Â  Â  Â  <div className="w-12 h-12 bg-gradient-to-r from-pink-500 to-purple-600 rounded-full animate-spin flex items-center justify-center mx-auto mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  <Tv className="w-6 h-6 text-white" />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600 dark:text-gray-300 transition-colors duration-300">
Â  Â  Â  Â  Â  Â  Â  Â  {t.status_loading_episodes || 'Loading episodes...'}
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <div className={isMobile ? 'space-y-2' : 'space-y-3'}>
Â  Â  Â  Â  Â  Â  Â  {episodes.map((episode) => (
Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  key={episode.id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`group bg-gradient-to-br from-pink-50 to-purple-50 dark:from-gray-700 dark:to-gray-600 border border-pink-200/50 dark:border-gray-600/50 overflow-hidden hover:shadow-lg transition-all duration-300 ${isMobile ? 'rounded-lg' : 'rounded-xl'}`}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={isMobile ? 'p-3' : 'p-4'}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between mb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="bg-gradient-to-r from-pink-500 to-purple-600 text-white px-3 py-1 rounded-full text-sm font-semibold">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {episode.episode_number}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className={`font-semibold ${isMobile ? 'text-sm' : 'text-base'} text-gray-900 dark:text-white group-hover:text-pink-600 dark:group-hover:text-pink-400 transition-colors`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {episode.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className={`flex items-center space-x-2 ${isMobile ? 'flex-col' : ''}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  to={`/tv/${id}/season/${episode.season_number}/episode/${episode.episode_number}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-gray-500 dark:text-gray-400 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors p-1"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title="View Episode Details"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Grid className="w-5 h-5" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {episode.overview && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => toggleDescription(episode.id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-gray-500 dark:text-gray-400 hover:text-pink-600 dark:hover:text-pink-400 transition-colors p-1"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title={t.show_episode_info || 'Show episode info'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Info className="w-5 h-5" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleWatchEpisode(episode)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-gradient-to-r from-pink-500 to-purple-600 text-white px-3 py-1 rounded-lg font-semibold hover:from-pink-600 hover:to-purple-700 transition-colors flex items-center space-x-2"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title={t.action_watch || 'Watch'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Play className="w-4 h-4" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>{t.action_watch || 'Watch'}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {showDescriptions[episode.id] && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mt-3 p-3 bg-white/60 dark:bg-gray-800/60 rounded-lg border border-pink-200/30 dark:border-gray-600/30 transition-colors duration-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {episode.air_date && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center text-sm text-gray-600 dark:text-gray-300 mb-2 transition-colors duration-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Calendar className="w-4 h-4 mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium">{t.episode_aired || 'Aired'}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="ml-1">{formatAirDate(episode.air_date)}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {episode.overview && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-700 dark:text-gray-300 text-sm leading-relaxed transition-colors duration-300">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {episode.overview}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  )
}

export default TVDetail
